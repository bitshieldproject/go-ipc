package main

import (
	"bytes"
	"fmt"
	"io"
	"net"
	"os"
	"strconv"
)

type IPC struct {
	addr     string
	network  string
	listener *net.UnixListener
}

func CreateAddr(name string) string {
	pid := strconv.Itoa(os.Getpid())

	return "/tmp/" + name + "-" + pid + ".sock"
}

func CreateIPC(network, addr string) (*IPC, error) {
	switch network {
	case "unix", "unixpacket":
		return &IPC{addr: addr, network: network}, nil
	default:
		return &IPC{}, nil //ここエラー
	}
}

func (ipc *IPC) Listen() (err error) {

	ipc.listener, err = net.ListenUnix(ipc.network, &net.UnixAddr{Name: ipc.addr})

	return err
}

func (ipc *IPC) Accept() (*net.UnixConn, error) {

	return ipc.listener.AcceptUnix()
}

func (ipc *IPC) Addr() net.Addr {
	return ipc.listener.Addr()
}

func (ipc *IPC) GetFile() (*os.File, error) {
	return ipc.listener.File()
}

func (ipc *IPC) Close() {
	ipc.addr = ""
	ipc.network = ""
	ipc.listener.Close()
}

func ReadAll(cnn *net.UnixConn) ([]byte, error) {

	var data bytes.Buffer

	for {

		buf := make([]byte, 1024)

		n, err := cnn.Read(buf)

		if n == 0 || err == io.EOF {
			break
		} else if err != nil && err != io.EOF {
			return nil, err
		}

		data.Write(buf[:n])

	}

	return data.Bytes(), nil
}

func (ipc *IPC) UnixDial() (cnn *net.UnixConn, err error) {

	cnn, err = net.DialUnix(ipc.network, nil, &net.UnixAddr{Name: ipc.addr})

	return
}

func main() {
	/*
		ipc, err := CreateIPC("unix", "/tmp/ipc-test.sock")
		fmt.Println(ipc)
		fmt.Println(err)
		fmt.Println(ipc.Listen())
		fmt.Println(ipc.Addr().String())

		cnn, err := ipc.Accept()
		fmt.Println(err)

		read, err := ReadAll(cnn)
		fmt.Println(string(read))
		fmt.Println(err)

		cnn.Close()
		ipc.Close()
	*/

	ipc, err := CreateIPC("unix", "/tmp/ipc-test.sock")

	cnn, err := ipc.UnixDial()
	fmt.Println(err)
	fmt.Println(cnn.Write([]byte("Hello")))
}

//TmpDir決める
//PID取得する
//socket作る
/*
	tmpDir, err := ioutil.TempDir("", "ipc-test-uds.")
	fmt.Println(err)
	fmt.Println(tmpDir)
	socket := tmpDir + "/server." + strconv.Itoa(os.Getpid())

	fmt.Println(socket)
	fmt.Println(os.Stat(tmpDir))
	s, _ := os.Stat(tmpDir)
	fmt.Println(s.IsDir())
	listener, err := net.Listen("unix", socket)

	fmt.Println(err)
	listener.Close()*/

//os.RemoveAll(tmpDir)

//cnn, _ := uds.Accept()
//cnn.Close()
//fmt.Println(uds.socket)
//fmt.Println(uds.Addr())
//uds.Close()
//fmt.Println(uds.socket)
/*
func Listen(network string) *IPC {

	return &IPC{}
}

type UnixDomainSocket struct {
	socket   string
	listener net.Listener
}

func CreateSocketAddr(name string) string {

	pid := strconv.Itoa(os.Getpid())

	return "/tmp/" + name + "-" + pid + ".sock"
}

func Open(path string) *UnixDomainSocket {
	return &UnixDomainSocket{socket: path}
}

func OpenAndListen(path string) (*UnixDomainSocket, error) {
	uds := Open(path)

	return uds, uds.Listen()
}

func (uds *UnixDomainSocket) Listen() (err error) {

	uds.listener, err = net.Listen("unix", uds.socket)

	return err
}

func (uds *UnixDomainSocket) Accept() (net.Conn, error) {
	return uds.listener.Accept()
}

func (uds *UnixDomainSocket) Addr() net.Addr {
	return uds.listener.Addr()
}

//func (uds *UnixDomainSocket) Close(leaveFile bool) {
func (uds *UnixDomainSocket) Close() {
	uds.listener.Close()
	uds.socket = ""

}

*/
